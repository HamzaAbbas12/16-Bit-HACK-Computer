// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the lectures and the book.
 */
CHIP Memory {
    IN in[16], load, address[15];  // Inputs: 16-bit data 'in', load signal, and 15-bit address
    OUT out[16];                   // Output: 16-bit data 'out'

    PARTS:
    // The following components make up the Memory chip:

    // DMux4Way: Demultiplexer to route the 'load' signal to the appropriate memory area based on address[13..14]
    DMux4Way(in=load, sel=address[13..14], a=Ram1Sel, b=Ram2Sel, c=ScreenSel, d=kbdSel);
    // Or: Combines the two RAM select signals (Ram1Sel and Ram2Sel) into one (RamSel)
    Or(a=Ram1Sel, b=Ram2Sel, out=RamSel);

    // RAM16K: 16K general-purpose RAM
    // 'in' is the data to be written
    // 'load' is the signal to write data
    // 'address[0..13]' specifies the address within the RAM
    // 'out' provides the data read from the RAM
    RAM16K(in=in, load=RamSel, address=address[0..13], out=RamOut);

    // Screen: Memory-mapped I/O for the screen
    // 'in' is the data to be written
    // 'load' is the signal to write data
    // 'address[0..12]' specifies the address within the screen memory
    // 'out' provides the data read from the screen memory
    Screen(in=in, load=ScreenSel, address=address[0..12], out=ScreenOut);

    // Keyboard: Memory-mapped I/O for the keyboard
    // 'out' provides the data read from the keyboard memory
    Keyboard(out=kbdout);

    // Mux4Way16: Multiplexer to select the appropriate output based on address[13..14]
    // Selects between the outputs of the RAM, screen, and keyboard
    Mux4Way16(a=RamOut, b=RamOut, c=ScreenOut, d=kbdout, sel=address[13..14], out=out);
}
